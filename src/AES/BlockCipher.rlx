
#Require "$/Console.rlx"

; https://legacy.cryptool.org/en/cto/aes-animation

define void DoPrintAESBlock(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	i8* BlockBytes := Parameters[*ParameterIndex] As void*
	
	this->Print("%B %B %B %B\n", BlockBytes[0], BlockBytes[4], BlockBytes[8], BlockBytes[12])
    this->Print("%B %B %B %B\n", BlockBytes[1], BlockBytes[5], BlockBytes[9], BlockBytes[13])
    this->Print("%B %B %B %B\n", BlockBytes[2], BlockBytes[6], BlockBytes[10], BlockBytes[14])
    this->Print("%B %B %B %B\n", BlockBytes[3], BlockBytes[7], BlockBytes[11], BlockBytes[15])
	
	*ParameterIndex += 1
}

PrintFormatPrototype AESBlockPrintPrototype {
	Name: "aes_blk",
	Format: &DoPrintAESBlock
}

i32 AES_BLOCK_PRINT_PROTOTYPE_ID := AddPrintFormat(&AESBlockPrintPrototype)


i8* AES_S_BOX := i8[
;      0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

i8* AES_INVERSE_S_BOX := i8[
;      0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

enum AESKeySize {
    128 := 4
    192 := 6
    256 := 8
}

struct AESRoundKey {
    i32[4] Words
}

struct AESBlockCipher {
    union {
        AESKeySize KeySize
        i32 KeySizeBytes
    }

    i32 RoundCount
    
    union {
        i8[8] Key
        AESRoundKey[16] RoundKeys
        i32[64] RoundKeyWords
    }

    static self* New(AESKeySize KeySize) {
        self* this := Alloc(#self)

        this->KeySize := KeySize
        this->RoundCount := this->KeySizeBytes + 6

        return this
    }

    define i32 RotWord(i32 In) {
        i32 A := In & 0xFF
        i32 B := (In >> 8) & 0xFF
        i32 C := (In >> 16) & 0xFF
        i32 D := (In >> 24) & 0xFF

        return B | (C << 8) | (D << 16) | (A << 24)
    }

    define i32 SubWord(i8* SBox, i32 In) {
        i32 A := SBox[In & 0xFF] & 0xFF
        i32 B := SBox[(In >> 8) & 0xFF] & 0xFF
        i32 C := SBox[(In >> 16) & 0xFF] & 0xFF
        i32 D := SBox[(In >> 24) & 0xFF] & 0xFF

        return A | (B << 8) | (C << 16) | (D << 24)
    }

    define i32 SubWord(i32 In) {
        return this->SubWord(AES_S_BOX, In)
    }
    define i32 InvSubWord(i32 In) {
        return this->SubWord(AES_INVERSE_S_BOX, In)
    }

    define void DeriveRoundKeys() {
        i32* RoundConstants := i32[0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]

        i32 N := this->KeySizeBytes
        i32 R := this->RoundCount + 1

        /* for (i32 Index := 0, Index < N, Index++) {
            this->RoundKeyWords[Index] := this->Key[Index]
        } */

        for (i32 Index := N, Index < R * 4, Index++) {
            i32 Left := this->RoundKeyWords[Index - N]
            i32 Previous := this->RoundKeyWords[Index - 1]

            if (Index % N = 0) {
                i32 Rot := this->RotWord(Previous)

                ;Print("Rot %x -> %x\n", Previous, Rot)

                i32 Middle := this->SubWord(Rot)
                i32 Right := RoundConstants[Index / N]

                this->RoundKeyWords[Index] := Left ^ Middle ^ Right

                ;Print("%x, %x, %x\n", Left, Middle, Right)
            }
            else if (N > 6 && (Index % N) = 4) {
                i32 Right := this->SubWord(Previous)

                this->RoundKeyWords[Index] := Left ^ Right
            }
            else {
                this->RoundKeyWords[Index] := Left ^ Previous
            }
        }
    }

    define void SetKey(i8* Key) {
        MoveMemory(this->Key, Key, (this->KeySize As i32) * 4)
        this->DeriveRoundKeys()
    }

    define void DumpRoundKeys() {
        Print("%hexdump", this->RoundKeyWords, this->RoundCount * 16)
    }

    define void AddRoundKey(void* Block, void* RoundKey) {
        i32* BlockWords := Block
        i32* RoundKeyWords := RoundKey

        for (i32 Index := 0, Index < 4, Index++) {
            BlockWords[Index] ^= RoundKeyWords[Index]
        }
    }

    define void SubBytes(void* Block) {
        i32* BlockWords := Block

        for (i32 Index := 0, Index < 4, Index++) {
            BlockWords[Index] := this->SubWord(BlockWords[Index])
        }
    }

    define void InvSubBytes(void* Block) {
        i32* BlockWords := Block

        for (i32 Index := 0, Index < 4, Index++) {
            BlockWords[Index] := this->InvSubWord(BlockWords[Index])
        }
    }

    define void ShiftRow(i8* Row) {
        ;Print("ShiftRow %B %B %B %B => ", Row[0], Row[4], Row[8], Row[12])

        i8 Temp := Row[0]
        Row[0] := Row[4]
        Row[4] := Row[8]
        Row[8] := Row[12]
        Row[12] := Temp

        ;Print("%B %B %B %B\n", Row[0], Row[4], Row[8], Row[12])
    }

    define void InvShiftRow(i8* Row) {
        i8 Temp := Row[12]
        Row[12] := Row[8]
        Row[8] := Row[4]
        Row[4] := Row[0]
        Row[0] := Temp
    }

    define void ShiftRows(void* Block) {
        i8* BlockBytes := Block

        for (i32 RowNumber := 1, RowNumber < 4, RowNumber++) {
            i8* Row := BlockBytes + RowNumber

            for (i32 Index := 0, Index < RowNumber, Index++) {
                this->ShiftRow(Row)
            }
        }
    }

    define void InvShiftRows(void* Block) {
        i8* BlockBytes := Block

        for (i32 RowNumber := 1, RowNumber < 4, RowNumber++) {
            i8* Row := BlockBytes + RowNumber

            for (i32 Index := 0, Index < RowNumber, Index++) {
                this->InvShiftRow(Row)
            }
        }
    }

    define i32 GMul2(i32 In) {
        i32 Result := (In << 1) & 0xFF

        if (In < 128) {
            return Result
        }
        else {
            return Result ^ 0x1B
        }
    }

    define i32 MixColumnsRow(i32 Times3, i32 Times2, i32 C, i32 D) {
        i32 A := this->GMul2(Times3) ^ Times3
        i32 B := this->GMul2(Times2)

        ;Print("%B * 3 = %B\n", Times3, A)
        ;Print("%B * 2 = %B\n", Times3, this->GMul2(Times3))
        ;Print("%B * 2 = %B\n", Times2, B)
        ;Print("%B * 1 = %B\n", C, C)
        ;Print("%B * 1 = %B\n", D, D)

        return A ^ B ^ C ^ D
    }

    define i32 InvMixColumnsRow(i32 Times14, i32 Times13, i32 Times11, i32 Times9) {

        ; 9 = (2 * 2 * 2) + 1
        i32 D := this->GMul2(this->GMul2(this->GMul2(Times9))) ^ Times9

        ; 11 = (((2 * 2) + 1) * 2) + 1
        i32 C := this->GMul2(this->GMul2(this->GMul2(Times11)) ^ Times11) ^ Times11

        ; 13 = ((2 + 1) * 2 * 2) + 1
        i32 B := this->GMul2(this->GMul2(this->GMul2(Times13) ^ Times13)) ^ Times13

        ; 14 = (((2 + 1) * 2) + 1) * 2
        i32 A := this->GMul2(this->GMul2(this->GMul2(Times14) ^ Times14) ^ Times14)

        return A ^ B ^ C ^ D
    }

    define void MixColumns(void* Block) {
        i32* BlockWords := Block

        for (i32 Index := 0, Index < 4, Index++) {
            i32 Row := BlockWords[Index]

            i32 A := Row & 0xFF
            i32 B := (Row >> 8) & 0xFF
            i32 C := (Row >> 16) & 0xFF
            i32 D := (Row >> 24) & 0xFF

            i32 A1 := this->MixColumnsRow(B, A, D, C)
            i32 B1 := this->MixColumnsRow(C, B, A, D)
            i32 C1 := this->MixColumnsRow(D, C, B, A)
            i32 D1 := this->MixColumnsRow(A, D, C, B)

            BlockWords[Index] := A1 | (B1 << 8) | (C1 << 16) | (D1 << 24)
        }
    }

    define void InvMixColumns(void* Block) {
        i32* BlockWords := Block

        for (i32 Index := 0, Index < 4, Index++) {
            i32 Row := BlockWords[Index]

            i32 A := Row & 0xFF
            i32 B := (Row >> 8) & 0xFF
            i32 C := (Row >> 16) & 0xFF
            i32 D := (Row >> 24) & 0xFF

            i32 A1 := this->InvMixColumnsRow(A, C, B, D)
            i32 B1 := this->InvMixColumnsRow(B, D, C, A)
            i32 C1 := this->InvMixColumnsRow(C, A, D, B)
            i32 D1 := this->InvMixColumnsRow(D, B, A, C)

            BlockWords[Index] := A1 | (B1 << 8) | (C1 << 16) | (D1 << 24)
        }
    }

    define void EncryptBlock(void* Block) {
        this->AddRoundKey(Block, this->RoundKeys[0])

        for (i32 Index := 1, Index < this->RoundCount, Index++) {
            ;Print("Round %i input:\n%aes_blk\n", Index, Block)

            this->SubBytes(Block)
            ;Print("Round %i after SubBytes:\n%aes_blk\n", Index, Block)

            this->ShiftRows(Block)
            ;Print("Round %i after ShiftRows:\n%aes_blk\n", Index, Block)

            this->MixColumns(Block)
            ;Print("Round %i after MixColumns:\n%aes_blk\n", Index, Block)

            this->AddRoundKey(Block, this->RoundKeys[Index])
            ;Print("Round %i output:\n%aes_blk\n", Index, Block)
        }

        this->SubBytes(Block)
        ;Print("Last Round After SubBytes:\n%aes_blk\n", Block)

        this->ShiftRows(Block)
        ;Print("Last Round After ShiftRows:\n%aes_blk\n", Block)

        this->AddRoundKey(Block, this->RoundKeys[Index])
    }

    define void DecryptBlock(void* Block) {
        this->AddRoundKey(Block, this->RoundKeys[this->RoundCount])
        ;Print("Last Round After ShiftRows:\n%aes_blk\n", Block)

        this->InvShiftRows(Block)
        ;Print("Last Round After SubBytes:\n%aes_blk\n", Block)

        this->InvSubBytes(Block)

        for (i32 Index := this->RoundCount - 1, Index >= 1, Index--) {
            ;Print("Round %i output:\n%aes_blk\n", Index, Block)
            
            this->AddRoundKey(Block, this->RoundKeys[Index])
            ;Print("Round %i after MixColumns:\n%aes_blk\n", Index, Block)

            this->InvMixColumns(Block)
            ;Print("Round %i after ShiftRows:\n%aes_blk\n", Index, Block)

            this->InvShiftRows(Block)
            ;Print("Round %i after SubBytes:\n%aes_blk\n", Index, Block)

            ;break
            this->InvSubBytes(Block)
        }

        this->AddRoundKey(Block, this->RoundKeys[0])
    }
}