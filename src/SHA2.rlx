
#Require "$/Console.rlx"

#Require "$/Memory.rlx"

#Require "./src/Endianess.rlx"

#Require "./src/HashHelpers.rlx"


class SHA2_256 implements IHashFunction, derives INew {
    i32[8] H
    i32[64] K

    i32 ChunkCursor
    i32 Length

    union {
        i8[64] ChunkBytes
        i32[16] ChunkWords
        i32[64] W
    }

    define void Prepare() {
        this->ChunkCursor := 0
        this->Length := 0

        MoveMemory(this->H, i32[
            0x6a09e667,
            0xbb67ae85,
            0x3c6ef372,
            0xa54ff53a,
            0x510e527f,
            0x9b05688c,
            0x1f83d9ab,
            0x5be0cd19
        ], 8 * 4)

        MoveMemory(this->K, i32[
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ], 64 * 4)
    }

    define void New() {
        this->Prepare()
    }

    static i32 RotateRight(i32 Value, i32 Distance) asm {
        mov, rcx, p2
        { 0xD3, 0xCF } ; ror edi, cl
        mov, rax, rdi
        ret
    }

    define void UpdateChunk(i32* Chunk) {
        this->ChunkCursor := 0

        i32* W := this->W

        for (i32 Index := 0, Index < 16, Index++) {
            W[Index] := Swap32(Chunk[Index])
        }

        for (i32 Index := 16, Index < 64, Index++) {
            i32 S0 := self:RotateRight(W[Index - 15], 7)
            S0 ^= self:RotateRight(W[Index - 15], 18)
            S0 ^= W[Index - 15] >> 3

            i32 S1 := self:RotateRight(W[Index - 2], 17)
            S1 ^= self:RotateRight(W[Index - 2], 19)
            S1 ^= W[Index - 2] >> 10

            W[Index] := W[Index - 16] + S0 + W[Index - 7] + S1
        }

        i32[8] A
        MoveMemory(A, this->H, 8 * 4)

        i32* K := this->K

        for (i32 Index := 0, Index < 64, Index++) {
            i32 S1a := self:RotateRight(A[4], 6) 
            i32 S1b := self:RotateRight(A[4], 11)
            i32 S1c := self:RotateRight(A[4], 25)
            i32 S1 := S1a ^ S1b ^ S1c
            
            i32 Ch := (A[4] & A[5]) ^ (~A[4] & A[6])
            i32 Temp1 := A[7] + S1 + Ch + K[Index] + W[Index]

            i32 S0 := self:RotateRight(A[0], 2) ^ self:RotateRight(A[0], 13) ^ self:RotateRight(A[0], 22)
            i32 Maj := (A[0] & A[1]) ^ (A[0] & A[2]) ^ (A[1] & A[2])
            i32 Temp2 := S0 + Maj

            A[7] := A[6]
            A[6] := A[5]
            A[5] := A[4]
            A[4] := A[3] + Temp1
            A[3] := A[2]
            A[2] := A[1]
            A[1] := A[0]
            A[0] := Temp1 + Temp2
        }

        for (i32 Index := 0, Index < 8, Index++) {
            this->H[Index] += A[Index]
        }
    }

    define void Update(void* Data, i32 Size) {
        this->Length += Size

        while (Size != 0) {
            if (this->ChunkCursor) {
                ; We have a partial block to fill

                i8* ChunkBytesTail := this->ChunkBytes + this->ChunkCursor
                i32 SizeToFill := 64 - this->ChunkCursor

                if (Size >= SizeToFill) {
                    ; We have enough inbound data to fill the block completely

                    MoveMemory(ChunkBytesTail, Data, SizeToFill)
                    Size -= SizeToFill
                    Data += SizeToFill

                    this->UpdateChunk(this->ChunkWords)
                }
                else {
                    ; Block will still be partial

                    MoveMemory(ChunkBytesTail, Data, Size)
                    this->ChunkCursor += Size

                    break
                }
            }
            else {
                if (Size >= 64) {
                    ; Enough for a full block of processing

                    MoveMemory(this->ChunkBytes, Data, 64)
                    this->UpdateChunk(this->ChunkWords)

                    Size -= 64
                    Data += 64
                }
                else {
                    ; Leftover, turns into a partial block

                    MoveMemory(this->ChunkBytes, Data, Size)
                    this->ChunkCursor := Size

                    break
                }
            }
        }
    }

    define void PadFillCurrentChunk() {
        for (i32 Index := this->ChunkCursor, Index < 64, Index++) {
            this->ChunkBytes[Index] := 0
        }
    }

    define i32 ChunkSpace() {
        return 64 - this->ChunkCursor
    }

    define void Finalize(void* Output) {
        if (this->ChunkSpace() = 0) {
            ; Ensure we have enough space for the 0x80 terminator

            this->UpdateChunk(this->ChunkWords)
        }

        this->Update(i8[0x80], 1)

        if (this->ChunkSpace() < 8) {
            ; Not enough room for length, pad+flush chunk

            this->PadFillCurrentChunk()
            this->UpdateChunk(this->ChunkWords)
        }

        ; Pad to end of chunk for length

        this->PadFillCurrentChunk()
        
        i64 SwappedBitLength := Swap64((this->Length - 1) * 8) ; Exclude 0x80 terminator

        this->ChunkCursor := 56
        this->Update(&SwappedBitLength, 8)

        this->Length -= 9 ; Update to ignore terminator+length

        for (i32 Index := 0, Index < 8, Index++) {
            ; Swap output back to LE

            this->H[Index] := Swap32(this->H[Index])
        }

        MoveMemory(Output, this->H, 32)

        this->Initialize()
    }

    define void GetInfo(HashFunctionInfo* Info) {
        Info->BlockSize := 64
        Info->OutputSize := 32
    }
}

class SHA2_512 implements IHashFunction, derives INew {
    i64[8] H
    i64[80] K

    i32 ChunkCursor
    i32 Length

    union {
        i8[128] ChunkBytes
        i64[16] ChunkWords
        i64[80] W
    }

    define void Prepare() {
        this->ChunkCursor := 0
        this->Length := 0

        MoveMemory(this->H, i64[
            0x6a09e667f3bcc908,
            0xbb67ae8584caa73b,
            0x3c6ef372fe94f82b,
            0xa54ff53a5f1d36f1, 
            0x510e527fade682d1,
            0x9b05688c2b3e6c1f,
            0x1f83d9abfb41bd6b,
            0x5be0cd19137e2179
        ], 8 * 8)

        MoveMemory(this->K, i64[
            0x428a2f98d728ae22, 0x7137449123ef65cd, 0xb5c0fbcfec4d3b2f, 0xe9b5dba58189dbbc, 0x3956c25bf348b538, 
            0x59f111f1b605d019, 0x923f82a4af194f9b, 0xab1c5ed5da6d8118, 0xd807aa98a3030242, 0x12835b0145706fbe, 
            0x243185be4ee4b28c, 0x550c7dc3d5ffb4e2, 0x72be5d74f27b896f, 0x80deb1fe3b1696b1, 0x9bdc06a725c71235, 
            0xc19bf174cf692694, 0xe49b69c19ef14ad2, 0xefbe4786384f25e3, 0x0fc19dc68b8cd5b5, 0x240ca1cc77ac9c65, 
            0x2de92c6f592b0275, 0x4a7484aa6ea6e483, 0x5cb0a9dcbd41fbd4, 0x76f988da831153b5, 0x983e5152ee66dfab, 
            0xa831c66d2db43210, 0xb00327c898fb213f, 0xbf597fc7beef0ee4, 0xc6e00bf33da88fc2, 0xd5a79147930aa725, 
            0x06ca6351e003826f, 0x142929670a0e6e70, 0x27b70a8546d22ffc, 0x2e1b21385c26c926, 0x4d2c6dfc5ac42aed, 
            0x53380d139d95b3df, 0x650a73548baf63de, 0x766a0abb3c77b2a8, 0x81c2c92e47edaee6, 0x92722c851482353b, 
            0xa2bfe8a14cf10364, 0xa81a664bbc423001, 0xc24b8b70d0f89791, 0xc76c51a30654be30, 0xd192e819d6ef5218, 
            0xd69906245565a910, 0xf40e35855771202a, 0x106aa07032bbd1b8, 0x19a4c116b8d2d0c8, 0x1e376c085141ab53, 
            0x2748774cdf8eeb99, 0x34b0bcb5e19b48a8, 0x391c0cb3c5c95a63, 0x4ed8aa4ae3418acb, 0x5b9cca4f7763e373, 
            0x682e6ff3d6b2b8a3, 0x748f82ee5defb2fc, 0x78a5636f43172f60, 0x84c87814a1f0ab72, 0x8cc702081a6439ec, 
            0x90befffa23631e28, 0xa4506cebde82bde9, 0xbef9a3f7b2c67915, 0xc67178f2e372532b, 0xca273eceea26619c, 
            0xd186b8c721c0c207, 0xeada7dd6cde0eb1e, 0xf57d4f7fee6ed178, 0x06f067aa72176fba, 0x0a637dc5a2c898a6, 
            0x113f9804bef90dae, 0x1b710b35131c471b, 0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc, 
            0x431d67c49c100d4c, 0x4cc5d4becb3e42b6, 0x597f299cfc657e2a, 0x5fcb6fab3ad6faec, 0x6c44198c4a475817
        ], 80 * 8)
    }

    define void New() {
        this->Prepare()
    }

    static i64 RotateRight(i64 Value, i32 Distance) asm {
        mov, rcx, p2
        { 0x48, 0xD3, 0xCF } ; ror rdi, cl
        mov, rax, rdi
        ret
    }

    define void UpdateChunk(i64* Chunk) {
        this->ChunkCursor := 0

        Print("UpdateChunk:\n%hexdump\n", Chunk, 16 * 8)

        i64* W := this->W

        for (i32 Index := 0, Index < 16, Index++) {
            W[Index] := Swap64(Chunk[Index])
        }

        for (i32 Index := 16, Index < 80, Index++) {
            i64 S0 := self:RotateRight(W[Index - 15], 1)
            S0 ^= self:RotateRight(W[Index - 15], 8)
            S0 ^= W[Index - 15] >> 7

            i64 S1 := self:RotateRight(W[Index - 2], 19)
            S1 ^= self:RotateRight(W[Index - 2], 61)
            S1 ^= W[Index - 2] >> 6

            W[Index] := W[Index - 16] + S0 + W[Index - 7] + S1
        }

        i64[8] A
        MoveMemory(A, this->H, 8 * 8)

        i64* K := this->K

        for (i32 Index := 0, Index < 80, Index++) {
            i64 S1a := self:RotateRight(A[4], 14) 
            i64 S1b := self:RotateRight(A[4], 18)
            i64 S1c := self:RotateRight(A[4], 41)
            i64 S1 := S1a ^ S1b ^ S1c
            
            i64 Ch := (A[4] & A[5]) ^ (~A[4] & A[6])
            i64 Temp1 := A[7] + S1 + Ch + K[Index] + W[Index]

            i64 S0 := self:RotateRight(A[0], 28) ^ self:RotateRight(A[0], 34) ^ self:RotateRight(A[0], 39)
            i64 Maj := (A[0] & A[1]) ^ (A[0] & A[2]) ^ (A[1] & A[2])
            i64 Temp2 := S0 + Maj

            A[7] := A[6]
            A[6] := A[5]
            A[5] := A[4]
            A[4] := A[3] + Temp1
            A[3] := A[2]
            A[2] := A[1]
            A[1] := A[0]
            A[0] := Temp1 + Temp2
        }

        for (i32 Index := 0, Index < 8, Index++) {
            this->H[Index] += A[Index]
        }
    }

    define void Update(void* Data, i32 Size) {
        this->Length += Size

        while (Size != 0) {
            if (this->ChunkCursor) {
                ; We have a partial block to fill

                i8* ChunkBytesTail := this->ChunkBytes + this->ChunkCursor
                i32 SizeToFill := 128 - this->ChunkCursor

                if (Size >= SizeToFill) {
                    ; We have enough inbound data to fill the block completely

                    MoveMemory(ChunkBytesTail, Data, SizeToFill)
                    Size -= SizeToFill
                    Data += SizeToFill

                    this->UpdateChunk(this->ChunkWords)
                }
                else {
                    ; Block will still be partial

                    MoveMemory(ChunkBytesTail, Data, Size)
                    this->ChunkCursor += Size

                    break
                }
            }
            else {
                if (Size >= 128) {
                    ; Enough for a full block of processing

                    MoveMemory(this->ChunkBytes, Data, 128)
                    this->UpdateChunk(this->ChunkWords)

                    Size -= 128
                    Data += 128
                }
                else {
                    ; Leftover, turns into a partial block

                    MoveMemory(this->ChunkBytes, Data, Size)
                    this->ChunkCursor := Size

                    break
                }
            }
        }
    }

    define void PadFillCurrentChunk() {
        for (i32 Index := this->ChunkCursor, Index < 128, Index++) {
            this->ChunkBytes[Index] := 0
        }
    }

    define i32 ChunkSpace() {
        return 128 - this->ChunkCursor
    }

    define void Finalize(void* Output) {
        if (this->ChunkSpace() = 0) {
            ; Ensure we have enough space for the 0x80 terminator

            this->UpdateChunk(this->ChunkWords)
        }

        this->Update(i8[0x80], 1)

        if (this->ChunkSpace() < 16) {
            ; Not enough room for length, pad+flush chunk

            this->PadFillCurrentChunk()
            this->UpdateChunk(this->ChunkWords)
        }

        ; Pad to end of chunk for length

        this->PadFillCurrentChunk()
        
        i64 SwappedBitLength := Swap64((this->Length - 1) * 8) ; Exclude 0x80 terminator

        this->ChunkCursor := 120
        this->Update(&SwappedBitLength, 8)

        this->Length -= 9 ; Update to ignore terminator+length

        for (i32 Index := 0, Index < 8, Index++) {
            ; Swap output back to LE

            this->H[Index] := Swap64(this->H[Index])
        }

        MoveMemory(Output, this->H, 64)

        this->Initialize()
    }

    define void GetInfo(HashFunctionInfo* Info) {
        Info->BlockSize := 128
        Info->OutputSize := 64
    }
}

#Require "./src/HMAC.rlx"


define void Main() {
    SHA2_256* Base := new SHA2_256()
    HMACWrapper* HMAC := new HMACWrapper(Base)

    HMAC->SetKey("key", 3)

    i8* TestString := "The quick brown fox jumps over the lazy dog"
    i8[32] Hash

    HMAC->Prepare()
    HMAC->Update(TestString, StringLength(TestString))
    HMAC->Finalize(Hash)

    Print("%hexdump\n", Hash, 32)
}
