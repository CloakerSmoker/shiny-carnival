
define i32 DecodeHexCharacter(i8 Next) {
    if ('0' <= Next && Next <= '9') {
        return Next - '0'
    }
    else if ('a' <= Next && Next <= 'f') {
        return 10 + Next - 'a'
    }
    else if ('A' <= Next && Next <= 'F') {
        return 10 + Next - 'A'
    }
    else {
        return -1
    }
}

define i32 DecodeHex(i8* String, i32 Length, i8* Output) {
    if (Length % 2 != 0) {
        return -1
    }

    for (i32 Index := 0, Index < Length / 2, Index++) {
        i32 I2 := Index * 2

        i32 Upper := DecodeHexCharacter(String[I2])
        i32 Lower := DecodeHexCharacter(String[I2 + 1])

        if (Upper < 0 || Lower < 0) {
            return -1
        }

        if (Output) {
            Output[Index] := ((Upper << 4) | Lower) As i8
        }
    }

    return Length / 2
}

define i32 DecodeBase64Character(i8 Next) {
    if ('A' <= Next && Next <= 'Z') {
        return Next - 'A'
    }
    else if ('a' <= Next && Next <= 'z') {
        return Next - 'a' + 26
    }
    else if ('0' <= Next && Next <= '9') {
        return Next - '0' + 52
    }
    else if (Next = '+') {
        return 62
    }
    else if (Next = '/') {
        return 63
    }
    else {
        return 0
    }
}

define i32 DecodeBase64(i8* String, i32 Length, i8* Output) {
    i32 Accumulator := 0
    i32 Accumulated := 0

    i32 OutputIndex := 0

    i8 Done := false

    for (i32 Index := 0, Index < Length, Index++) {
        i8 Next := String[Index]

        if (Next = 10) {
            continue
        }

        if (Next = '=') {
            Done := true
            continue
        }

        i32 NextValue := DecodeBase64Character(Next)

        Accumulator := (Accumulator << 6) | (NextValue & 0x3F)
        Accumulated += 6

        if (Accumulated >= 8) {
            Accumulated -= 8

            if (Output) {
                ;Print("Output 8/%i %x -> %x\n", Accumulated + 8, (Accumulator >> Accumulated) & 0xFF, (Accumulator >> Accumulated) As i8)

                Output[OutputIndex] := (Accumulator >> Accumulated) As i8
                Accumulator &= (1 << Accumulated) - 1
            }

            OutputIndex++
        }
    }

    ;Print("Final accumulator: %x (%i bits)\n", Accumulator, Accumulated)

    return OutputIndex
}