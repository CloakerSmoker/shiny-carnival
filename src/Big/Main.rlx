
#Require "./src/Big/Big.rlx"

#Require "./src/Table.rlx"

define i32 Main() {
    /*Table* T := new Table()

    T->DefineColumn("Name", "%s")->Align(ColumnAlignment::Right, '.')
    T->DefineColumn("Age", "%i")
    T->DefineColumn("Description", "%s")->AlignValue(ColumnAlignment::Right)

    T->Row("Alice", 25, "A person")
    T->Row("Bob", 30, "Another person")
    T->Row("Charlie", 35, "Yet another person")
    T->Row("David", 40, "Still another person")

    Print("%table\n", T)*/

    /*BigNumber* N := new BigNumber("12")
    BigNumber* D := new BigNumber("5")

    BigNumber* R := null
    BigNumber* Q := BigNumber:DivideByGuessCheck(N, D, &R)

    Print("%bn-rd / %bn-rd = %bn-rd (r %bn-rd)\n", N, D, Q, R)*/

    /*
    BigNumber* N := new BigNumber("2000000000")
    i32 PrimeCount := 0

    Print("Primes from %bn-base-10:\n", N)

    while (PrimeCount < 8000) {
        if (BigNumber:IsPrime(N)) {
            Print("%bn-base-10 ", N)
            PrimeCount++
        }

        N->_Increment(1)
    }
    ;*/

    BigNumber* A := new BigNumber("7341000402513752772839968579769700798139529526730564")
    BigNumber* B := new BigNumber("127612323123098120981293867")

    Print("%bn-digits / %bn-digits\n", A, B)

    BigNumber* R := null
    BigNumber* Q := BigNumber:DivideByGuessCheck(A, B, &R)

    Print("%bn-base-10, %bn-base-10\n", Q, R)

    /*
    BigNumber* N := new BigNumber("1999999999")
    
    BigNumber* R := BigNumber:WithDigits(N->DigitCount + 1)

    BigNumber:FastMultiplyBySingleDigit(N, 2, R)
    BigNumber* R2 := BigNumber:MultiplyBySingleDigit(N, 2)

    Print("%bn-base-10 * 2 = %bn-digits\n", N, R)
    Print("%bn-base-10 * 2 = %bn-digits\n", N, R2)
    ;*/


    HadLeaks()
    

    ;Walk()

    ;BigNumber* A := new BigNumber("2")

    ;Walk()

    ;BigNumber* E := new BigNumber("8192")

    ;Walk()

    ;BigNumber* R := A->Reference()->Power(E->Reference())

    ;Print("%i\n", R->DigitCount)

    ;Print("2 ** 64 = %bn-base-10\n", R)

    ;HadLeaks()

    return 0
}