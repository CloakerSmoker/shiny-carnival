
#Require "./src/Big/Big.rlx"

#Require "./src/Table.rlx"

define i64 SBB(i64 A, i64 B, i32* C) asm {
   { 0x31, 0xC0, 0x19, 0xF7, 0x0F, 0x92, 0xC0, 0x89, 0x02, 0x48, 0x89, 0xF8, 0xC3 }
}

#Require "./src/RSA/KeyGeneration.rlx"

define i32 Main() {
    ;/*
    BigInteger* P := new BigInteger("99758735164714702799276454558872470852563873719586038539159968514601288142641")
    BigInteger* Q := new BigInteger("90202394321714396633877009482749686206171606105776450541491709550997220029373")
    BigInteger* E := new BigInteger("65537")

    RSAKeyPair* Keys := RSAKeyGenerator:GenerateKeysFromPrimes(P, Q, E)

    P->Release()
    Q->Release()
    E->Release()

    Print("N: %bn-base-10\n", Keys->N)
    Print("LambdaN: %bn-base-10\n", Keys->LambdaN)
    Print("E: %bn-base-10\n", Keys->E)
    Print("D: %bn-base-10\n", Keys->D)

    BigInteger* M := new BigInteger("65")

    BigInteger* C := Keys->Encrypt(M->Reference())
    BigInteger* P := Keys->Decrypt(C->Reference())

    Print("M -> C -> P: %bn-base-10 -> %bn-base-10 -> %bn-base-10\n", M, C, P)

    M->Release()
    C->Release()
    P->Release()

    Keys->N->Release()
    Keys->LambdaN->Release()
    Keys->E->Release()
    Keys->D->Release()
    ;*/


    /*
    BigInteger* N := new BigInteger(3123)
    BigInteger* M := new BigInteger(266666)

    BigInteger* R := BigInteger:ModularInverse(N, M)

    Print("%i, %i\n", N->ReferenceCount, M->ReferenceCount)

    Print("modinv(%bn-base-10, %bn-base-10) = %bn-base-10\n", N, M, R)

    N->Release()
    M->Release()
    R->Release()
    ;*/

    ;BigInteger* N := new BigInteger("99999999999999999999")

    ;Print("Ï†(%bn-base-10) = %bn-base-10\n", N, BigInteger:EulerTotient(N->Reference()))

    ; 1053827034588979840 - 439389982947623109 = 614437051641356731, not 614437051640356731

    ; [49753, 422863, 346302] - [115124, 166173, 88010] = [410624, 107426, 575656]

    /*
    BigInteger* A := new BigInteger("1053827034588979840")
    BigInteger* B := new BigInteger("439389982947623109")
    BigInteger* R := BigInteger:FastBaseSubtract(A->Reference(), B->Reference())

    BigInteger* Expected := new BigInteger("614437051641356731")

    Print("Expecting: %bn-digits - %bn-digits = %bn-digits\n", A, B, Expected)

    Print("%bn-base-10 - %bn-base-10 = %bn-base-10\n", A, B, R)
    Print("%bn-digits\n", R)

    BigInteger:BaseSubtract(A->Reference(), B->Reference())

    if (R->Equals(Expected)) {
        Print("Correct\n")
    } else {
        Print("Incorrect\n")
    }
    ;*/

    /*
    i64 A := 1
    i64 B := 1

    i32 Br := 0
    i64 R := SBB(A, B, &Br)

    Print("%i - %i = %i (borrow %i)\n", A, B, (R As i32), Br)
    */

    /*Table* T := new Table()

    T->DefineColumn("Name", "%s")->Align(ColumnAlignment::Right, '.')
    T->DefineColumn("Age", "%i")
    T->DefineColumn("Description", "%s")->AlignValue(ColumnAlignment::Right)

    T->Row("Alice", 25, "A person")
    T->Row("Bob", 30, "Another person")
    T->Row("Charlie", 35, "Yet another person")
    T->Row("David", 40, "Still another person")

    Print("%table\n", T)*/

    /*BigInteger* N := new BigInteger("12")
    BigInteger* D := new BigInteger("5")

    BigInteger* R := null
    BigInteger* Q := BigInteger:DivideByGuessCheck(N, D, &R)

    Print("%bn-rd / %bn-rd = %bn-rd (r %bn-rd)\n", N, D, Q, R)*/

    /*
    BigInteger* N := new BigInteger("2000000000")
    i32 PrimeCount := 0

    Print("Primes from %bn-base-10:\n", N)

    while (PrimeCount < 8000) {
        if (BigInteger:IsPrime(N)) {
            Print("%bn-base-10 ", N)
            PrimeCount++
        }

        N->_Increment(1)
    }
    ;*/

    /*
    BigInteger* A := new BigInteger("7341000402513752772839968579769700798139529526730564")
    BigInteger* B := new BigInteger("127612323123098120981293867")

    Print("%bn-digits / %bn-digits\n", A, B)

    BigInteger* R := null
    BigInteger* Q := BigInteger:DivideByGuessCheck(A, B, &R)

    Print("%bn-base-10, %bn-base-10\n", Q, R)
    ;*/

    /*
    BigInteger* N := new BigInteger("1999999999")
    
    BigInteger* R := BigInteger:WithDigits(N->DigitCount + 1)

    BigInteger:FastMultiplyBySingleDigit(N, 2, R)
    BigInteger* R2 := BigInteger:MultiplyBySingleDigit(N, 2)

    Print("%bn-base-10 * 2 = %bn-digits\n", N, R)
    Print("%bn-base-10 * 2 = %bn-digits\n", N, R2)
    ;*/


    HadLeaks()
    

    ;Walk()

    ;BigInteger* A := new BigInteger("2")

    ;Walk()

    ;BigInteger* E := new BigInteger("8192")

    ;Walk()

    ;BigInteger* R := A->Reference()->Power(E->Reference())

    ;Print("%i\n", R->DigitCount)

    ;Print("2 ** 64 = %bn-base-10\n", R)

    ;HadLeaks()

    return 0
}