define void DoPrintBigIntegerDigits(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	BigInteger* N := Parameters[*ParameterIndex] As void*

    if (N->Negative) {
        this->Print("-")
    }

    this->Print("[")

    for (i32 Index := N->DigitCount - 1, Index >= 0, Index--) {
        this->Print("%i", N->Digits[Index])

        if (Index - 1 >= 0) {
            this->Print(", ")
        }
    }

    this->Print("]")
	
	
	*ParameterIndex += 1
}

PrintFormatPrototype BigIntegerDigitsPrintPrototype {
	Name: "bn-digits",
	Format: &DoPrintBigIntegerDigits
}

i32 BIG_NUMBER_DIGITS_PRINT_PROTOTYPE_ID := AddPrintFormat(&BigIntegerDigitsPrintPrototype)


define void DoPrintBigIntegerRawDigits(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
	BigInteger* N := Parameters[*ParameterIndex] As void*

    if (N->Negative) {
        this->Print("-")
    }
    
    for (i32 Index := N->DigitCount - 1, Index >= 0, Index--) {
        this->Print("%i", N->Digits[Index])
    }
	
	*ParameterIndex += 1
}

PrintFormatPrototype BigIntegerRawDigitsPrintPrototype {
	Name: "bn-rd",
	Format: &DoPrintBigIntegerRawDigits
}

i32 BIG_NUMBER_RAW_DIGITS_PRINT_PROTOTYPE_ID := AddPrintFormat(&BigIntegerRawDigitsPrintPrototype)


define void DoPrintBigIntegerBase(PrintOutputAdapterPrototype* this, i8* Format, i32* FormatIndex, void* Parameters, i32 ParameterCount, i32* ParameterIndex) {
    i32 FormatLength := StringLength(Format)
    i32 Index := 1 + *FormatIndex

    i32 RawBase := 0

    while (IsNumeric(Format[Index])) {
        RawBase *= 10
        RawBase += GetCharacterValue(Format[Index++])
    }

    *FormatIndex := Index - 1

    BigInteger* N := Parameters[*ParameterIndex] As void*
    BigInteger* Base := new BigInteger(RawBase)

    *ParameterIndex += 1

    if (RawBase <= 1 || RawBase >= 37) {
        this->Print("<Invalid big number base %i>", RawBase)
        return
    }

    i8* Buffer := Alloc((35 - RawBase) * N->DigitCount)

    BigInteger* Value := N->Reference()->AbsoluteValue()

    for (i32 Index := 0, Value->IsNotZero(), Index++) {
        BigInteger* Remainder := null
        Value := Value->Divide(Base->Reference(), &Remainder)

        Buffer[Index] := NumberToCharacter(Remainder->Digits[0] As i8)
        Remainder->Release()
    }

    Value->Release()
    Base->Release()

    if (N->Negative) {
        Buffer[Index++] := '-'
    }

    MemoryReverse(Buffer, Index)
    this->DoPrintCharacters(Buffer, Index)
}

PrintFormatPrototype BigIntegerBasePrintPrototype {
	Name: "bn-base-",
	Format: &DoPrintBigIntegerBase
}

i32 BIG_NUMBER_BASE_PRINT_PROTOTYPE_ID := AddPrintFormat(&BigIntegerBasePrintPrototype)
